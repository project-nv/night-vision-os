
// NavyJS ~ 0.1-lite

// Multiple splines, format: [<timestamp>, <num1>, <num2>, ...]

[OVERLAY name=Splines, ctx=Canvas, author=ChartMaster, version=1.0.0]

prop('lineWidth', { type: 'number', def: 1 })
prop('widths', { type: 'Array', def: [] })
prop('colors', { type: 'Array', def: [] })
prop('skipNan', { type: 'boolean', def: false })

const COLORS = $props.colors.length ? $props.colors : [
    '#53c153', '#d1c045', '#d37734', '#d63953', '#c43cb9',
    '#6c3cc4', '#444bc9', '#44c2c9', '#44c98d'
]
draw(ctx) {

    let num = ($core.data[0] || []).length ?? 0
    for (var i = 0; i < num; i++) {
        let _i = i % COLORS.length
        ctx.strokeStyle = COLORS[_i]
        ctx.lineJoin = "round"
        ctx.lineWidth = $props.widths[i] || $props.lineWidth
        ctx.beginPath()
        drawSpline(ctx, i)
        ctx.stroke()
    }

}

drawSpline(ctx, idx) {
    const layout = $core.layout
    const data = $core.data
    const view = $core.view
    if (!this.skipNan) {
        for (var i = view.i1, n = view.i2; i <= n; i++) {
            let p = data[i]
            let x = layout.ti2x(p[0], i)
            let y = layout.value2y(p[idx + 1])
            ctx.lineTo(x, y)
        }
    } else {
        var skip = false
        for (var i = view.i1, n = view.i2; i <= n; i++) {
            let p = data[i]
            let x = layout.ti2x(p[0], i)
            let y = layout.value2y(p[idx + 1])
            if (p[idx + 1] == null || y !== y) {
                skip = true
            } else {
                if (skip) ctx.moveTo(x, y)
                ctx.lineTo(x, y)
                skip = false
            }
        }
    }
}

// Legend, defined as pairs [value, color]
legend(x) => x.slice(1) // remove time
    .map((v, i) => [ // map value => color
        v, COLORS[i % COLORS.length]
    ])
